vscode 자동완성기능 켜기 - Ctrl + Space

file -> Preferences -> Keyboard Shortcuts -> format document 검색하기(자동줄바꿈 단축키)

자동줄바꿈 기능 확장기능 - Prettier - Code formatter 설치하고
file -> Preferences -> Settings -> format 검색하기 -> Editor:Default Formatter 항목 Prettier로 변경해주기

크롬 개발자 도구에서 요소 선택하기 - Ctrl + Shift + C

fonts.google.com - 폰트 관련 구글 사이트

링크 추가로 다운로드 받은 글꼴 사용시 font-family: 'Fira Sans'; 이런식으로 '' 작은 따옴표 안에 글꼴명 사용

font-family: 'Fira Sans', sans-serif; 이런식으로 지정하면 fallback폰트로 처음 글꼴 불러오기 실패시 브라우저의 기본 글꼴 대신 자동으로 다음 글꼴 적용됨

border-radius를 적용할때 가로, 세로 높이의 절반을 적용하면 정확하게 원형의 모습이 된다.

text-align은 해당 요소의 컨텐츠를 정렬하는 속성이다. 즉, <p>안녕하세요</p> p태그 자체가 아니라 p태그 안의 컨텐츠가 정렬된다. 예를들어<img>태그의 이미지를 정렬하려고 text-align 속성을 사용한다면 <img>태그 자체에 사용하면 아무런 변화가 없지만 <body>태그에 적용하면 정렬이 될것이다.

CSS파일에 순서는 상관이 없지만 HTML태그 순서로 나열하고, 유형선택자를 그룹별로 두면 보기 좋을 것이다.

CSS 전체 선택자, 유형 선택자, (가상 선택자? 가상 클래스?/의사클래스,의사요소), 클래스 선택자, ID 선택자, 특성 선택자

<!DOCTYPE html>
<html lang="en"> - 언어 지정
<head>
    <meta charset="UTF-8"> - 이 화면에서 사용 중인 문자를 브라우저에 알리는 역할
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> - 반응형 웹사이트 디자인에 관한 설정
    <title>My Upcoming Challenges</title> - 검색엔진 결과에 표시되는 타이틀을 설정(탭에 표시되는 타이틀도 설정)
</head>
<body>
    
</body>
</html>

file -> Preferences -> Keyboard Shortcuts -> comment 검색하기 -> Toggle Line Comment(주석 처리 단축키)

CSS 로직을 제어하는 규칙의 세가지 핵심 용어
Inheritance(상속) / Cascading Style Sheets(계단식 스타일 시트에 해당하는 계단식 상속) / Specificity(우선순위)

Inheritance(상속) - 특정 컨테이너 규칙이 하위 항목에 적용된다는 걸 의미한다. 이때 특정이란 말이 중요한데 모든 규칙이 자동으로 자손에게 적용되는 게 아니기 때문이다. 예를 들어 부모 요소에 너비가 정의되어 있다고 해서 모든 자손의 너비가 이와 같은건 아니기 때문이다. 따라서 상식적으로 생각해보면 실제로 상속되는 규칙과 그렇지 않은 규칙을 이해하는데 큰 도움이 된다.

Cascading Style Sheets(계단식 스타일 시트에 해당하는 계단식 상속) - 하나의 요소에 여러 규칙을 적용할 수 있다는 걸 뜻한다.
계단식 상속 로직은 각기 시작점이 다른 여러 규칙을 하나의 요소에 적용할 수 있다는 것을 뜻한다. 여기서 하나의 규칙이 여러개 있을 때는 항상 가장 최근에 적용된 규칙이 우선 적용된다.

Specificity(우선순위) - 더욱 구체적인 선택자에 적용된 규칙이 덜 구체적인 선택자보다 우선한다. 여기서 더 구체적이란, 특정 요소 하나만 선택되는 걸 의미한다.

CSS 박스 모델 - padding, border, margin 설정하기

선택자 -
Type = elementname / ID = #id / Group = elementname, elementname / Class = .class

Combinators -
Descendant(자손 결합자) = li p = All p with li as ancestor(부모가 아니라 조상)
Child(자식 결합자) = h2 > p = Only p which are direct children of h2(직계 자식에만 적용)

클래스 결합자가 자손 결합자 보다 더 구체적이라 우선순위가 더 높다.

블록 요소 vs 인라인 요소
블록 요소 - 위치한 곳의 전체 공간을 차지함
인라인 요소 - 위치한 곳의 자신의 위치만 차지함 / 위•아래의 padding,margin이 적용 안됨, 오•왼만 적용됨 / 위•아래 padding은 자기자신에게만 적용되고 다른 요소에게 영향을 미치지 못해서 밀어내지는 못함 따라서 padding의 추가로 자신의 크기가 커지게 되면 다른 요소를 덮어버리는 문제가 발생함 -> 해결하려면 display 속성으로 block 요소로 바꾸거나 inline-block로 바꾸면 위•아래 padding,margin도 블록 요소와 똑같이 적용되서 다른 요소에 영향을 미침
인라인 요소에는 replaced와 non-replaced 두 가지가 있음 / non-replaced에는 예를들어서 <a>태그가 있고, / replaced에는 <img> 태그가 있음, 요소 그 자체를 이미지 자체로 교체할 수 있고, 다른 페이지로 연결되서 거기에서 콘텐츠로 대체될 수도 있기 때문, 그리고 이러한 대체 인라인 요소에는 위•아래 수직 여백을 적용할 수 있음

여백 겹침(margin collapsing) - 수직 여백에서만 발생하는 현상, 더 큰 여백이 항상 우세함, 블록 요소에서만 발생, 인라인 요소는 당연하고 인라인-블록 요소에서도 발생하지 않음

box-shadow - x축, y축, 테두리 흐림, 색

list 등에서 border-left 처럼 한쪽만 테두리 지정할 경우 border 크기만큼 텍스트의 시작 위치가 안맞는 경우가 생기는데 이럴 경우 전체 list등에 border값을 지정하고 색상을 transparent로 투명하게 해놓고 원하는 list 항목에만 border-color로 색상을 지정한다. 물론 border-left 등을 다시 정의해줘도 되지만 중복되니까...

텍스트의 어느 부분만 강조하고 싶을때 <span>태그로 감싼 후 CSS를 사용하는 방법도 있지만 컴퓨터는 이것을 강조 표시했다고 이해하지 못하기 때문에 검색 엔진 등에서도 알 수 있도록 하기 위해서는 <em>태그나, <strong>태그 등으로 감싸서 강조해주는게 의미적으로 좋다. 
두가지 태그는 약간의 차이가 있는데 strong - 강한 어조로 읽어 강조의 의미를 전달함 / em -톤을 약간 변경하여 강조의 의미를 전달함

또한 <main>안에서도 <section>태그로 나누어주면 의미론적으로 좋다. 물론 <h2>태그를 사용함으로써 충분할 수도 있지만 개발자가 코드를 파악하기에도 section으로 나눠져 있는게 시안성이 훨씬 좋아진다.

favicon - 웹사이트의 title부분에 나타나는 이미지, 브라우저에서 기본적으로 로드함, 존재하지 않으면 지구본 모양
favicon generator - 페브아이콘 생성하는 방법 검색어
코드에 favicon 적용하기 - favicon.ico 파일을 프로젝트에 포함시키고, link태그로 연결한다. (favicon.io사이트에도 적용 코드 나와있음), <link rel="icon" href="favicon.ico경로" type="image/x-icon">

상대경로(relative paths) - 현재 위치에서 탐색한다.
절대경로(absolute path) - 경로 제일 앞에 / (슬래시) 붙여준다, 기본 루트 프로젝트 폴더에 있는 경로부터 탐색한다. 특히 하위 폴더에서 경로를 설정할 때 중요하다.

맥OS 터미널 - 터미널 켜면 위에 zsh 표시됨. 터미널이 명령을 실행하게 해주는 하드웨어라고 한다면 zsh는 터미널의 안에 있는 소프트웨어라고 생각하면 됨. 일단은 여기까지만... (zsh = z-Shell)
명령어 - pwd / ls / cd / cd .. / clear / mkdir "만들고 싶은 폴더 이름" / touch "만들고 싶은 파일이름.확장자명" / rm "삭제하고 싶은 파일명" / rmdir "삭제하고 싶은 폴더명" (파일이나 폴더가 들어있는 디렉토리는 삭제 안됨) /

윈도우 명령 프롬프트 - 윈도우키 + R 누르고 cmd 실행.
명령어 - dir / cd .. / "원하는 드라이브": / cd "이동하고자 하는 폴더명" / cd / / cls / mkdir "만들고 싶은 폴더명" / echo "파일의 내용 텍스트 입력" > "만들고 싶은 파일명.확장자명" / type "파일명.확장자명" / del "삭제하고 싶은 파일명" / rmdir "삭제하고 싶은 폴더명" / 

컴퓨터의 세 가지 핵심 디렉토리 - 홈 디렉토리, 사용자 디렉토리, 루트 디렉토리

github clone할때 git clone URL 적고 한칸 띄우고 . 적으면 새 폴더 지정하는게 아니라 현재 폴더에 그대로 복제됨

display: flex; 플렉스박스로 해두고(플렉스박스는 부모-자식 관계에 적용된다)
flex-direction: row; - row, row-reverse, column, column-reverse 등 여러가지 배치 가능
크롬 관리자 도구에서 해당 영역에서 flex 누르면 플렉스박스 표시됨
맨 왼쪽에서 맨 오른쪽까지가 주축, 위에서 아래는 교차축
reverse로 바꾸면 주축은 오른쪽에서 왼쪽, 교차축은 아래에서 위로 바뀌는 방식이다.

flex-wrap: nowrap; - nowrap, wrap로 설정하고, 정해진 width값이 없다면 창이 줄어들면 알아서 배치가 변함

flex-direction과 flex-wrap 의 기본값은 각각 row, nowrap 이다.

flex-flow: row nowrap; - flex-direction과 flex-wrap를 합친 기능이다.

align-items: center; - 플렉스박스의 요소가 높이가 다를때 원하는 높이로 설정한다.(세로 정렬)

justify-content: flex-start; - flex-start가 기본값, flex-end, center, space-between, space-around, space-evenly 등이 있음. 플렉스박스에서 남는 여유공간을 어디로 배치할지 정하는 기능이다.

background-image: url("");
background-position: center; - 배경이미지의 가운데로 맞추기
background-size: cover; - 배경이미지의 사이즈 조절하기, cover는 기본적으로 전체 요소를 덮어주는 것

<포지셔닝 요소>
position: static; - 포지션 설정, static는 고정, relative는 유동적, absolute는 아예 따로 놀게됨, fixed는 그 위치에 고정됨 즉 뷰포트에 상대적임
top: 20px; - 위에서 20px만큼 떨어지게 위치시킴, position이 relative일때, top, bottom, right, left 가능, -20px 가능

box-sizing: border-box; - width:100%를 주고 전체 사이즈를 전체 html 요소 사이즈에 맞춤, 기본값은 content-box

section 태그 밑에 ul 태그, 그 밑에 li 태그, 그 안에 img태그를 사용하는 경우에 ul에 display:flex, width:90% 값을 주고 img에 height:200px, width:100%를 준다고 해도 이미지가 해당 플렉스박스에 가로로 100% 반응형으로 차지하지 못한다.
img의 부모 요소인 li 태그에 flex:auto나 flex:1 또는 width:100%의 값을 줘야 제대로 동작한다. 강의에서는 이 부분이 없어도 제대로 동작했었는데 해당 강의 이후로 업데이트를 통하여 바뀐 부분인지는 나중에 찾아봐야겠다.

img태그를 사용할때 height, width, border-radius처럼 여러 값들을 적용하면 이미지가 늘어지거나 컨테이너 안에서 찌그러지는 등으로 약간 왜곡되는 현상이 발생하는데 이럴때
object-fit 값을 이용한다. 기본값은 fill인데 이건 주어진 조건에 맞게 이미지를 맞춘다. 따라서 원본과 종횡비가 달라져 기본적으로는 왜곡되는 현상이 발생한다. 해결하기 위해서는 contain 값을 주면 컨테이너 안에 가득차서 왜곡되지 않고 이미지 크기가 맞게 조절된다. 다만 컨테이너 크기에 따라 빈 공간이 생긴다.
결론적으로 cover를 사용하면 종횡비에 맞춰서 컨테이너 크기가 가득 차게 이미지를 보여주기 때문에 2가지 문제가 모두 해결된다. 물론 이 값도 단점이 있는데 반응형 디자인으로 뷰포트의 크기가 변하면 보여지는 이미지가 확대, 축소 되면서 달라진다. 따라서 디스플레이의 해상도에 따라 보여지는 이미지가 변하는 것이다.

CSS에는 기능(functions)라고 불리는 것들이 있다. 기능은 특정 오퍼레이션을 자동으로 적용하게끔 해준다, 그라데이션 등에 사용함(선형 그라데이션 CSS 기능), 기능은 항상 기능의 이름이 있고 괄호가 붙은 조합으로 나타난다. 괄호는 실행되어야 할 기능의 값을 가지게 된다.

background: linear-gradient(45deg, rgb(227, 255, 253), rgb(202, 243, 240)); -선형 그라데이션 CSS 기능(각도, 시작 색, 끝 색), 각도의 수치에 따라서 시작색과 끝색의 위치가 변하게 된다.

lorem 치고 tap키를 누르면 예제 텍스트가 자동 생성된다

overflow - 컨테이너를 초과해서 벗어난 요소에 적용된다. 즉, 넘친 부분을 통제할 수 있게 된다. 기본값은 visible이고, hidden을 적용하면 벗어난 부분이 감춰진다. overflow는 컨테이너의 자식에게는 적용되지 않고 컨테이너 자체에 적용된다. 컨테이너의 일부인 모든 요소들이 똑같이 적용되기를 원할때 사용한다.

display:grid
grid-template-columns: 1fr 1fr; - grid에서는 보통 px을 사용하지 않고, fr(fraction)을 사용한다. 차지하는 공간을 의미함.

gap: 100px 200px; - 각 행 사이에 100px의 틈, 각 열 사이에 200px의 틈을 준다.

li:first-of-type - 부모 요소 안에서 찾을 수 있는 첫 번째 li 태그 개별 항목을 선택하는 선택자.(즉, ul태그 하위의 li태그 중 가장 첫번째 li태그를 선택함)

li:nth-of-type(3) - 부모 요소 안에서 ( )안의 숫자번째의 개별 항목을 선택하는 선택자.(즉, 현재는 ul태그 하위의 li태그 중 3번째 li태그를 선택함)

nth-of-type() vs nth-child()

grid-column: 1 / 3; - 요소가 grid의 열을 몇개나 차지해야 하는지 설정한다.
작업관리자에서 grid를 눌렀을때 나오는 grid box에서 나오는 숫자가 해당하는 행과 열의 크기를 나타낸다. 1 / 2 는 1~2까지 차지함, 2 / 3 은 2~3까지 차지함.






